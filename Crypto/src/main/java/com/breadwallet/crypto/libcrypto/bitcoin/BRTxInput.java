package com.breadwallet.crypto.libcrypto.bitcoin;
import com.breadwallet.crypto.libcrypto.SizeT;
import com.breadwallet.crypto.libcrypto.support.UInt256;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : bitcoin/BRTransaction.h:12</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class BRTxInput extends Structure {
	/** C type : UInt256 */
	public UInt256 txHash;
	public int index;
	/** C type : char[75] */
	public byte[] address = new byte[75];
	public long amount;
	/** C type : uint8_t* */
	public Pointer script;
	public SizeT scriptLen;
	/** C type : uint8_t* */
	public Pointer signature;
	public SizeT sigLen;
	/** C type : uint8_t* */
	public Pointer witness;
	public SizeT witLen;
	public int sequence;
	public BRTxInput() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("txHash", "index", "address", "amount", "script", "scriptLen", "signature", "sigLen", "witness", "witLen", "sequence");
	}
	public BRTxInput(Pointer peer) {
		super(peer);
	}

	public String getAddressAsString() {
		String addressStr = new String(address, StandardCharsets.UTF_8);

		int len = addressStr.length();
		int end = 0;

		while ((end < len) && (addressStr.charAt(end) > ' ')) {
			end++;
		}

		return addressStr.substring(0, end);
	}

	public static class ByReference extends BRTxInput implements Structure.ByReference {
		
	};
	public static class ByValue extends BRTxInput implements Structure.ByValue {
		
	};
}
